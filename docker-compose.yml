version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: library_app
    ports:
      - "3000:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DATABASE_URL=postgresql://library_user:library_password@postgres:5432/library_db?schema=public
      - DATABASE_URL_DIRECT=postgresql://library_user:library_password@postgres:5432/library_db?schema=public
      - JWT_SECRET=your-production-jwt-secret
      - ALLOWED_ORIGINS=http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library_network
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: library_postgres
    environment:
      POSTGRES_DB: library_db
      POSTGRES_USER: library_user
      POSTGRES_PASSWORD: library_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - library_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U library_user -d library_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: library_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - library_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  library_network:
    driver: bridge
